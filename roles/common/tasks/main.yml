---
- name: users | Add sudo group
  become: yes
  become_user: root
  group: name=sudo state=present

- name: users | configure sudoers
  become: yes
  become_user: root
  lineinfile: "dest=/etc/sudoers state=present regexp='^%sudo' line='%sudo ALL=(ALL:ALL) ALL'"

- name: users | Add users
  become: yes
  become_user: root
  user: name={{item.name}} shell={{item.shell}} groups={{item.groups}} password={{item.password}} state=present
  with_items: ssh_users

- name: users | Add ssh user keys
  authorized_key: user={{ item.name }} key="{{ item.key }}"
  with_items: ssh_users

- name: base | Set hostname.
  become: yes
  become_user: root
  hostname: name={{ hostname }}

- name: base | set locale
  become: yes
  become_user: root
  locale_gen: name={{locale}} state=present

- name: base | Set /etc/localtime to {{ timezone }}
  become: yes
  become_user: root
  copy: src=/usr/share/zoneinfo/{{ timezone }} dest=/etc/localtime owner=root group=root mode=0644 backup=yes
  notify:
    - update timezone

- name: base | Performing dist-upgrade.
  apt: upgrade=dist

- name: base | Installing common packages.
  apt: state=present pkg={{ item }} update_cache=yes
  with_items:
    - ack-grep
    - autoconf
    - automake
    - bash-completion
    - bison
    - build-essential
    - curl
    - dnsutils
    - exuberant-ctags
    - fail2ban
    - git
    - htop
    - imagemagick
    - libc6-dev
    - libmysqlclient-dev
    - libncurses5-dev
    - libpq-dev
    - libreadline6
    - libreadline6-dev
    - libsqlite3-dev
    - libssl-dev
    - libtool
    - libxml2-dev
    - libxslt1-dev
    - libyaml-dev
    - logrotate
    - mlocate
    - mysql-client
    - mysql-common
    - mysql-server
    - nginx
    - nodejs
    - ntp
    - openssl
    - php5-cgi
    - php5-cli
    - php5-fpm
    - php5-mysql
    - pkg-config
    - postgis
    - postgresql-9.3
    - postgresql-contrib
    - python-mysqldb
    - python-psycopg2
    - screen
    - sudo
    - supervisor
    - tree
    - unzip
    - vim
    - unrar-free
    - wget
    - zip
    - zlib1g
    - zlib1g-dev
    - zsh

- name: base | Use a proper editor
  alternatives: name=editor path=/usr/bin/vim.basic

- name: mysql | Copy the my.cnf file
  template: src=my.cnf.{{ ansible_os_family }}.j2 dest={{ mysql_conf_dir }}/my.cnf
  notify:
    - restart mysql

- name: mysql | Ensure mysql is running and starts on boot
  service: name={{ mysql_service }} state=started enabled=yes

# Need to do this for idempotency, see
# http://ansible.cc/docs/modules.html#mysql-user
- name: mysql | update mysql root password for all root accounts
  mysql_user: name=root host=localhost password={{ mysql_root_db_pass }}

- name: mysql | Copy .my.cnf file with root password credentials
  template: src=.my.cnf.j2 dest=~/.my.cnf mode=0600

- name: mysql | update mysql root password for all root accounts
  mysql_user: name=root host={{ item }} password={{ mysql_root_db_pass }}
  with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1

- name: mysql | ensure anonymous users are not in the database
  mysql_user: name='' host={{ item }} state=absent
  with_items:
    - localhost
    - "{{ inventory_hostname }}"

- name: mysql | remove the test database
  mysql_db: name=test state=absent

- name: postgres | create postgres databases
  postgresql_db: name={{item.name}}
  with_items: ssh_users
  sudo: yes
  sudo_user: "{{postgresql_admin_user}}"

- name: postgres | ensure user has access to database
  postgresql_user: db={{item.name}} name={{item.name}} priv=ALL
  with_items: ssh_users
  sudo: yes
  sudo_user: "{{postgresql_admin_user}}"

- name: postgres | ensure user does not have unnecessary privilege
  postgresql_user: name={{item.name}} role_attr_flags=NOSUPERUSER,NOCREATEDB
  with_items: ssh_users
  sudo: yes
  sudo_user: "{{postgresql_admin_user}}"

- name: ensure ansible's apt_repository dependency is installed
  apt: pkg=python-apt state=latest update_cache=true cache_valid_time={{ apt_cache_valid_time }}
  when: nginx_configure_ppa

- name: ensure nginx apt repository is up to date
  apt_repository: repo='ppa:nginx/stable'
  when: nginx_configure_ppa

- name: ensure nginx latest stable is installed
  apt: pkg=nginx state=latest update_cache=true cache_valid_time={{ apt_cache_valid_time }}
  notify:
    - restart nginx

- name: ensure the default site is removed
  file: path=/etc/nginx/sites-{{ item }}/default state=absent
  with_items:
    - enabled
    - available
  notify:
    - restart nginx

- name: ensure nginx ssl directory is created
  file: path=/etc/nginx/ssl state=directory
  when: nginx_ssl

- name: ensure nginx ssl certificate and key are created
  copy: src={{ nginx_ssl_local_path }}/{{ item }} dest=/etc/nginx/ssl/{{ item }} mode=0600
  with_items:
    - "{{ nginx_ssl_cert_name }}"
    - "{{ nginx_ssl_key_name }}"
  when: nginx_ssl and nginx_ssl_manage_certs
  notify:
    - reload nginx

- name: ensure nginx is configured
  template: src=nginx_conf.j2 dest=/etc/nginx/nginx.conf group=root owner=root
  notify:
    - reload nginx

- name: ensure sites-available is configured
  template: src=nginx_sites-available.conf.j2 dest=/etc/nginx/sites-available/{{ nginx_upstream_name }} group=root owner=root
  notify:
    - reload nginx

- name: ensure sites-available is symlinked to sites-enabled
  file: src=/etc/nginx/sites-available/{{ nginx_upstream_name }} dest=/etc/nginx/sites-enabled/{{ nginx_upstream_name }} state=link
  notify:
    - restart nginx

- name: ensure nginx starts on a fresh reboot
  service: name=nginx state=started enabled=yes

- name: supervisor | Create the nginx supervisor config file
  template: src=supervisor_nginx_config.j2 dest=/etc/supervisor/conf.d/nginx.conf backup=yes

- name: supervisor | Create the postgres supervisor config file
  template: src=supervisor_postgres_config.j2 dest=/etc/supervisor/conf.d/postgres.conf backup=yes

- name: supervisor | Create the mysql supervisor config file
  template: src=supervisor_mysql_config.j2 dest=/etc/supervisor/conf.d/mysql.conf backup=yes

- name: supervisor | Re-read the Supervisor config files
  command: supervisorctl reread

- name: supervisor | Update Supervisor to add the app in the process group
  command: supervisorctl update

- name: Installs rbenv
  git: repo=https://github.com/sstephenson/rbenv.git dest=~{{ ruby_deploy_user }}/.rbenv
  tags:
    - ruby
    - ruby:install
    - install

- name: Ensure fragments bash dir exists
  file: dest=~{{ ruby_deploy_user }}/.bash.d/ state=directory

- name: Installs rbenv bash file
  copy: src=50_rbenv.bash dest=~{{ ruby_deploy_user }}/.bash.d/50_rbenv.bash mode=700 owner={{ ruby_deploy_user }}
  tags:
    - ruby
    - ruby:install
    - install

- name: Source rbenv bash file in dot bashrc
  lineinfile: dest=~{{ ruby_deploy_user }}/.bashrc regexp="rbenv" insertafter=EOF line="source ~/.bash.d/50_rbenv.bash" create=yes
  tags:
    - ruby
    - ruby:install
    - install

- name: Creates plugin directory
  file: path=~{{ ruby_deploy_user }}/.rbenv/plugins/ owner={{ ruby_deploy_user }} group={{ ruby_deploy_user }} mode=0755 state=directory
  tags:
    - ruby
    - ruby:install
    - install

- name: Installs ruby-build
  git: repo=https://github.com/sstephenson/ruby-build.git dest=~{{ ruby_deploy_user }}/.rbenv/plugins/ruby-build
  tags:
    - ruby
    - ruby:install
    - install

- name: Checks if target ruby is installed
  shell: cd; bash -lc "rbenv versions | grep {{ ruby_version }} | tr '*' ' ' | sed -e 's/\s\+//' | cut -f1 -d' '"
  register: ruby_is_installed
  tags:
    - ruby
    - ruby:install
    - install

- name: Installs ruby
  shell: cd; bash -lc "MAKEOPTS={{ rbenv_makeopts }} CONFIGURE_OPTS=--disable-install-rdoc rbenv install {{ ruby_version }}"
  when: ruby_is_installed.stdout != ruby_version
  # Takes no more than 600 secs on a small VM
  async: 600
  poll: 30
  notify: set global ruby version
  tags:
    - ruby
    - ruby:install
    - install

- name: Adds .gemrc
  copy: src=gemrc dest=~{{ ruby_deploy_user }}/.gemrc owner={{ ruby_deploy_user }} group={{ ruby_deploy_user }} mode=0750
  tags:
    - ruby
    - ruby:config
    - config
